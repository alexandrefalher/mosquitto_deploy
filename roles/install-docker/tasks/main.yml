- name: load compatibilities variables
  include_vars:
    file: vars/main.yml
    name: comp_var

- name: assert architecture compatibility
  assert:
    that:
      - ansible_facts['architecture']|lower in comp_var.architectures
    quiet: yes
    fail_msg: "architecture {{ansible_facts['architecture']|lower}} not supported"

- name: assert distribution compatibility
  assert:
    that:
      - ansible_facts['distribution']|lower in comp_var.distributions
    quiet: yes
    fail_msg: "distribution {{ansible_facts['distribution']|lower}} not supported"

- name: assert distribution release compatibility
  assert:
    that:
      - ansible_facts['distribution_release']|lower in comp_var.distribution.{{ansible_facts['distribution_release']}}
    quiet: yes
    fail_msg: "release {{ansible_facts['distribution_release']}} not supported"

- name: set architecture fact
  set_fact:
    arch: "{{item.value}}"
  with_dict: comp_var.architectures
  when: item.key == ansible_facts['architecture']

- name: install utils
  apt:
    name: "{{item.package_name}}"
    update_cache: yes
  loop:
    - { package_name: apt-transport-https }
    - { package_name: ca-certificates }
    - { package_name: gnupg-agent }
    - { package_name: software-properties-common }

- name: install docker gpg item.key
  apt_key:
    url: https://download.docker.com/linux/{{ansible_facts['distribution']|lower}}/gpg
    state: present

- name: set docker repository
  copy:
    content: "deb [arch={{arch}}] https://download.docker.com/linux/{{ansible_facts['distribution']|lower}} {{ansible_facts['distribution_release']|lower}} stable"

- name: install docker engine
  apt:
    name: "{{item.package_name}}"
    update_cache: yes
  loop:
    - { package_name: docker-ce }
    - { package_name: docker-ce-cli }
    - { package_name: containerd.io }
    - { package_name: docker-compose }

- name: add user to docker group
  user:
    name: "{{user}}"
    groups:
    - docker
    append: yes